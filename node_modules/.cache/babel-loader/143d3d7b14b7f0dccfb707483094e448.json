{"ast":null,"code":"import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit';\nconst initialCounterState = {\n  counter: 0,\n  showCounter: true\n};\nconst counterSlice = createSlice({\n  name: 'counter',\n  initialState: initialCounterState,\n  reducers: {\n    increment(state) {\n      state.counter++;\n    },\n\n    decrement(state) {\n      state.counter--;\n    },\n\n    increase(state, action) {\n      state.counter = state.counter + action.payload; //have to use this name: payload\n    },\n\n    toggleCounter(state) {\n      state.showCounter = !state.showCounter;\n    }\n\n  }\n});\nconst inititialAuthState = {\n  isAuthenticated: false\n};\nconst authSlice = createSlice({\n  name: 'authentication',\n  initialState: inititialAuthState,\n  reducers: {\n    login(state) {\n      state.isAuthenticated = true;\n    },\n\n    logout(state) {\n      state.isAuthenticated = false;\n    }\n\n  }\n}); // const store = createStore(slice.reducer);\n// or\n\nconst store = configureStore({\n  //store only have 1, slice can be many\n  reducer: counterSlice.reducer\n});\nexport const counterAction = counterSlice.actions; // const counterReducer = (state = initialState, action) => {\n//     if(action.type === 'increment') {\n//         return{\n//             counter:state.counter + 1,\n//             showCounter:state.showCounter\n//         }\n//     }\n//     if(action.type === 'increase') {\n//         return{\n//             counter:state.counter + action.amount,\n//             showCounter:state.showCounter\n//         }\n//     }\n//     if(action.type === 'decrement') {\n//         return {\n//             counter:state.counter - 1,\n//             showCounter:state.showCounter\n//         }\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n//     return state;\n// }\n// const store = createStore(counterReducer);\n\nexport default store;","map":{"version":3,"sources":["/Users/vietqnguyen/Desktop/React/13-redux-project/src/store/index.js"],"names":["createStore","createSlice","configureStore","initialCounterState","counter","showCounter","counterSlice","name","initialState","reducers","increment","state","decrement","increase","action","payload","toggleCounter","inititialAuthState","isAuthenticated","authSlice","login","logout","store","reducer","counterAction","actions"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,WAAT,EAAsBC,cAAtB,QAA4C,kBAA5C;AACA,MAAMC,mBAAmB,GAAG;AAACC,EAAAA,OAAO,EAAC,CAAT;AAAYC,EAAAA,WAAW,EAAE;AAAzB,CAA5B;AAEA,MAAMC,YAAY,GAAGL,WAAW,CAAC;AAC7BM,EAAAA,IAAI,EAAE,SADuB;AAE7BC,EAAAA,YAAY,EAAEL,mBAFe;AAG7BM,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KAHK;;AAINQ,IAAAA,SAAS,CAACD,KAAD,EAAQ;AACbA,MAAAA,KAAK,CAACP,OAAN;AACH,KANK;;AAONS,IAAAA,QAAQ,CAACF,KAAD,EAAQG,MAAR,EAAgB;AACpBH,MAAAA,KAAK,CAACP,OAAN,GAAgBO,KAAK,CAACP,OAAN,GAAgBU,MAAM,CAACC,OAAvC,CADoB,CAC4B;AACnD,KATK;;AAUNC,IAAAA,aAAa,CAACL,KAAD,EAAQ;AACjBA,MAAAA,KAAK,CAACN,WAAN,GAAoB,CAACM,KAAK,CAACN,WAA3B;AACH;;AAZK;AAHmB,CAAD,CAAhC;AAmBA,MAAMY,kBAAkB,GAAG;AACvBC,EAAAA,eAAe,EAAE;AADM,CAA3B;AAIA,MAAMC,SAAS,GAAGlB,WAAW,CAAC;AAC1BM,EAAAA,IAAI,EAAE,gBADoB;AAE1BC,EAAAA,YAAY,EAAES,kBAFY;AAG1BR,EAAAA,QAAQ,EAAE;AACNW,IAAAA,KAAK,CAACT,KAAD,EAAQ;AACTA,MAAAA,KAAK,CAACO,eAAN,GAAwB,IAAxB;AACH,KAHK;;AAING,IAAAA,MAAM,CAACV,KAAD,EAAQ;AACVA,MAAAA,KAAK,CAACO,eAAN,GAAwB,KAAxB;AACH;;AANK;AAHgB,CAAD,CAA7B,C,CAaA;AACA;;AAEA,MAAMI,KAAK,GAAGpB,cAAc,CAAC;AAAE;AAC3BqB,EAAAA,OAAO,EAAEjB,YAAY,CAACiB;AADG,CAAD,CAA5B;AAIA,OAAO,MAAMC,aAAa,GAAGlB,YAAY,CAACmB,OAAnC,C,CACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA,eAAeH,KAAf","sourcesContent":["import { createStore } from 'redux';\nimport { createSlice, configureStore } from '@reduxjs/toolkit'\nconst initialCounterState = {counter:0, showCounter: true};\n\nconst counterSlice = createSlice({\n    name: 'counter',\n    initialState: initialCounterState,\n    reducers: {\n        increment(state) {\n            state.counter++;\n        },\n        decrement(state) {\n            state.counter--\n        },\n        increase(state, action) {\n            state.counter = state.counter + action.payload; //have to use this name: payload\n        },\n        toggleCounter(state) {\n            state.showCounter = !state.showCounter;\n        }\n    }\n})\n\nconst inititialAuthState = {\n    isAuthenticated: false\n}\n\nconst authSlice = createSlice({\n    name: 'authentication',\n    initialState: inititialAuthState,\n    reducers: {\n        login(state) {\n            state.isAuthenticated = true;\n        },\n        logout(state) {\n            state.isAuthenticated = false;\n        }\n    }\n})\n\n// const store = createStore(slice.reducer);\n// or\n\nconst store = configureStore({ //store only have 1, slice can be many\n    reducer: counterSlice.reducer\n});\n\nexport const counterAction = counterSlice.actions;\n// const counterReducer = (state = initialState, action) => {\n//     if(action.type === 'increment') {\n//         return{\n//             counter:state.counter + 1,\n//             showCounter:state.showCounter\n//         }\n//     }\n//     if(action.type === 'increase') {\n//         return{\n//             counter:state.counter + action.amount,\n//             showCounter:state.showCounter\n//         }\n//     }\n//     if(action.type === 'decrement') {\n//         return {\n//             counter:state.counter - 1,\n//             showCounter:state.showCounter\n//         }\n//     }\n//     if (action.type === 'toggle') {\n//         return {\n//             showCounter: !state.showCounter,\n//             counter: state.counter\n//         }\n//     }\n\n//     return state;\n// }\n\n// const store = createStore(counterReducer);\n\nexport default store;"]},"metadata":{},"sourceType":"module"}